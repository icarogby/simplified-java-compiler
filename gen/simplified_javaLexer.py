# Generated from C:/Users/icaro/OneDrive/Documentos/GitHub/simplified-java-compiler\simplified_java.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,202,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,120,8,16,1,17,1,17,5,17,
        124,8,17,10,17,12,17,127,9,17,1,18,1,18,1,18,5,18,132,8,18,10,18,
        12,18,135,9,18,3,18,137,8,18,1,19,1,19,1,19,4,19,142,8,19,11,19,
        12,19,143,1,19,1,19,5,19,148,8,19,10,19,12,19,151,9,19,1,19,1,19,
        4,19,155,8,19,11,19,12,19,156,3,19,159,8,19,1,20,1,20,1,20,5,20,
        164,8,20,10,20,12,20,167,9,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,5,22,178,8,22,10,22,12,22,181,9,22,1,22,1,22,1,23,1,23,
        1,23,1,23,5,23,189,8,23,10,23,12,23,192,9,23,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,190,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,8,2,0,65,90,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,49,57,2,0,34,34,92,92,
        4,0,34,34,92,92,110,110,116,116,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,213,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,57,1,0,0,0,9,61,1,0,0,
        0,11,66,1,0,0,0,13,68,1,0,0,0,15,72,1,0,0,0,17,78,1,0,0,0,19,82,
        1,0,0,0,21,87,1,0,0,0,23,92,1,0,0,0,25,96,1,0,0,0,27,98,1,0,0,0,
        29,104,1,0,0,0,31,106,1,0,0,0,33,119,1,0,0,0,35,121,1,0,0,0,37,136,
        1,0,0,0,39,158,1,0,0,0,41,160,1,0,0,0,43,170,1,0,0,0,45,173,1,0,
        0,0,47,184,1,0,0,0,49,198,1,0,0,0,51,52,5,40,0,0,52,2,1,0,0,0,53,
        54,5,41,0,0,54,4,1,0,0,0,55,56,5,58,0,0,56,6,1,0,0,0,57,58,5,101,
        0,0,58,59,5,110,0,0,59,60,5,100,0,0,60,8,1,0,0,0,61,62,5,109,0,0,
        62,63,5,97,0,0,63,64,5,105,0,0,64,65,5,110,0,0,65,10,1,0,0,0,66,
        67,5,44,0,0,67,12,1,0,0,0,68,69,5,105,0,0,69,70,5,110,0,0,70,71,
        5,116,0,0,71,14,1,0,0,0,72,73,5,102,0,0,73,74,5,108,0,0,74,75,5,
        111,0,0,75,76,5,97,0,0,76,77,5,116,0,0,77,16,1,0,0,0,78,79,5,115,
        0,0,79,80,5,116,0,0,80,81,5,114,0,0,81,18,1,0,0,0,82,83,5,98,0,0,
        83,84,5,111,0,0,84,85,5,111,0,0,85,86,5,108,0,0,86,20,1,0,0,0,87,
        88,5,118,0,0,88,89,5,111,0,0,89,90,5,105,0,0,90,91,5,100,0,0,91,
        22,1,0,0,0,92,93,5,118,0,0,93,94,5,97,0,0,94,95,5,114,0,0,95,24,
        1,0,0,0,96,97,5,59,0,0,97,26,1,0,0,0,98,99,5,99,0,0,99,100,5,111,
        0,0,100,101,5,110,0,0,101,102,5,115,0,0,102,103,5,116,0,0,103,28,
        1,0,0,0,104,105,5,61,0,0,105,30,1,0,0,0,106,107,5,111,0,0,107,108,
        5,112,0,0,108,109,5,97,0,0,109,32,1,0,0,0,110,111,5,116,0,0,111,
        112,5,114,0,0,112,113,5,117,0,0,113,120,5,101,0,0,114,115,5,102,
        0,0,115,116,5,97,0,0,116,117,5,108,0,0,117,118,5,115,0,0,118,120,
        5,101,0,0,119,110,1,0,0,0,119,114,1,0,0,0,120,34,1,0,0,0,121,125,
        7,0,0,0,122,124,7,1,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,
        1,0,0,0,125,126,1,0,0,0,126,36,1,0,0,0,127,125,1,0,0,0,128,137,7,
        2,0,0,129,133,7,3,0,0,130,132,7,2,0,0,131,130,1,0,0,0,132,135,1,
        0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,137,1,0,0,0,135,133,1,
        0,0,0,136,128,1,0,0,0,136,129,1,0,0,0,137,38,1,0,0,0,138,139,7,2,
        0,0,139,141,5,46,0,0,140,142,7,2,0,0,141,140,1,0,0,0,142,143,1,0,
        0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,159,1,0,0,0,145,149,7,3,
        0,0,146,148,7,2,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,
        0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,154,5,46,
        0,0,153,155,7,2,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,
        0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,138,1,0,0,0,158,145,1,0,
        0,0,159,40,1,0,0,0,160,165,5,34,0,0,161,164,3,43,21,0,162,164,8,
        4,0,0,163,161,1,0,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,
        0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,
        34,0,0,169,42,1,0,0,0,170,171,5,92,0,0,171,172,7,5,0,0,172,44,1,
        0,0,0,173,174,5,47,0,0,174,175,5,47,0,0,175,179,1,0,0,0,176,178,
        8,6,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,
        1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,6,22,0,0,183,46,
        1,0,0,0,184,185,5,47,0,0,185,186,5,42,0,0,186,190,1,0,0,0,187,189,
        9,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,191,1,0,0,0,190,188,
        1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,5,42,0,0,194,195,
        5,47,0,0,195,196,1,0,0,0,196,197,6,23,0,0,197,48,1,0,0,0,198,199,
        7,7,0,0,199,200,1,0,0,0,200,201,6,24,1,0,201,50,1,0,0,0,13,0,119,
        125,133,136,143,149,156,158,163,165,179,190,2,0,1,0,6,0,0
    ]

class simplified_javaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    BOOL = 17
    ID = 18
    INT = 19
    FLOAT = 20
    STR = 21
    ESC = 22
    LINE_COMMENT = 23
    BLOCK_COMMENT = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "':'", "'end'", "'main'", "','", "'int'", "'float'", 
            "'str'", "'bool'", "'void'", "'var'", "';'", "'const'", "'='", 
            "'opa'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "ID", "INT", "FLOAT", "STR", "ESC", "LINE_COMMENT", 
            "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "BOOL", "ID", "INT", "FLOAT", "STR", 
                  "ESC", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "simplified_java.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


